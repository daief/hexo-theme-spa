{"pathKey":"/page/1","page":{"posts":[{"id":"reading-records-2020","excerpt":"<p>1213</p>\n<p>123123123</p>","title":"Fri Jan 22 2021 16:04:03 GMT+0800 (GMT+08:00)","comments":true,"link":"","path":"/post/reading-records-2020"},{"id":"build-a-poor-vue","excerpt":"<p><del>没有钱了，肯定要学啊，不学没有钱用。</del></p>\n<p><del>看源码是不可能看的，这辈子不可能看的。写东西又不会写，就是看这种东西，才能维持得了生活这样子。</del></p>\n<p><del>什么 Github、掘金、知乎上面个个都是人才，说话又好听，技术又厉害，超喜欢在上面逛的。</del></p>","title":"学写一个乞丐版 Vue","comments":true,"link":"","path":"/post/build-a-poor-vue"},{"id":"hexo-custom-code-highlight-by-prismjs","excerpt":"<p>一直就想优化一下 Hexo 的代码高亮部分来着，对 <code>ts</code>、<code>tsx</code> 部分的支持一直不太好；也许直接更新 Next 就能直接解决，但博客部分已经魔改了不少，本着这个原则就继续魔改下去好了。</p>\n<blockquote>\n<p>本站是在 Next 5 的基础上建成的，不过本文内容与 Next 5 的关系不大</p>\n</blockquote>","title":"使用 prismjs 自定义 Hexo 代码高亮","comments":true,"link":"","path":"/post/hexo-custom-code-highlight-by-prismjs"},{"id":"encapsulation-in-react","excerpt":"<p>结合资料以及一直以来的开发情况，总结记录一下 React 中的封装方式，具体是以下三种：</p>\n<ul>\n<li>HOC</li>\n<li>Render Props</li>\n<li>React Hooks</li>\n</ul>","title":"React 中的一些封装","comments":true,"link":"","path":"/post/encapsulation-in-react"},{"id":"my-mac-apps","excerpt":"<p>记一下自用的简易 Mac 应用清单：</p>","title":"我的 Mac 应用","comments":true,"link":"","path":"/post/my-mac-apps"},{"id":"function-hoist-and-conditionally-created-functions","excerpt":"<p>本文始于这样一道 JavaScript 题目。</p>\n<pre class=\"line-numbers language-js\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>","title":"函数提升 & 有条件地创建函数","comments":true,"link":"","path":"/post/function-hoist-and-conditionally-created-functions"},{"id":"oop-in-javascript","excerpt":"<p>在 JavaScript 中没有类的概念，因此它的对象与基于类的语言中的对象不同。</p>\n<blockquote>\n<p>ECMA-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。</p>\n</blockquote>\n<p>一直以来在编程中都是使用 <code>class</code>、<code>extends</code> 关键字，而这实际上是 ES6 中添加的语法糖。在熟练使用语法糖的同时，有必要了解其背后的原生实现。</p>","title":"JavaScript 中的面向对象","comments":true,"link":"","path":"/post/oop-in-javascript"},{"id":"the-prototype-of-javascript","excerpt":"<p>一直以来没有系统地去学习过原型相关的知识概念，虽然平时直接使用不多，但时常会看到，有必要搞明白一点。</p>","title":"JavaScript 原型相关","comments":true,"link":"","path":"/post/the-prototype-of-javascript"},{"id":"usage-of-ts-transformer","excerpt":"<p><code>TS transformer</code> 简单来讲就像<a href=\"https://babeljs.io/docs/en/plugins/\">babel 插件</a>一样，只不过作用于 TypeScript 的编译过程。</p>\n<p>与 babel 插件不同的是，配置 transformer 的时候会有 <code>before</code>、<code>after</code>、<code>afterDeclarations</code> 这三种选项，如果不清楚他们之前的区别的话，使用的时候会充满困惑。</p>\n<p>本文只关注 transformer 的使用，对应的 demo 仓库：<a href=\"https://github.com/daief/usage-of-ts-transformer\">https://github.com/daief/usage-of-ts-transformer</a>。</p>","title":"TS transformer 的使用","comments":true,"link":"","path":"/post/usage-of-ts-transformer"},{"id":"build-a-site-generator-by-a-custom-webpack-loader","excerpt":"<p>本篇内容实际上在公司内部分享时有过讲解，通过编写一个自定义的 webpack loader，实现方便快速地构建一个文档类型的网站。现在重新实现了一下，并将这个部分的内容与 <code>jugg</code> 进行了结合，故自己再次整理一遍。</p>","title":"自定义 webpack loader 来实现简单的站点生成器","comments":true,"link":"","path":"/post/build-a-site-generator-by-a-custom-webpack-loader"}],"total":5,"current":1,"prev":null,"prev_link":"/page/1/","next":2,"next_link":"/page/2/"}}
