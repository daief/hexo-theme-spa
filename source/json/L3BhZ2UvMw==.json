{"pathKey":"/page/3","page":{"posts":[{"id":"try-to-improve-spa-load-performance","excerpt":"<p>如今的前端页面越来越丰富了，承载着各种功能。而随之增长的则是相应的代码量，加上三方 SDK 的接入以及单页应用（SPA）的特性，一次页面访问会出现慢的感觉，是时候来关注页面的加载优化了。</p>\n<p>本文简略描述关于 React 单页应用的加载优化，下文所指加载一般包括下载、执行两个步骤。</p>","title":"记一次单页应用的加载优化","comments":true,"link":"","path":"/post/try-to-improve-spa-load-performance"},{"id":"transforming-concurrent-asynchronous-operations-into-serial-execution","excerpt":"<p>情景还原：有一个用 Promise 封装的异步操作，用于 JS 与客户端交互以获取数据，但当出现并发调用获取数据的时候发现只有其中的一次操作有回调，而剩余的调用就像丢失了一样、后续的步骤（then）也得不到执行。实际上有多种解决方式，这里考虑将这些并发的调用转化为串行执行来确保每次的调用接收到回调。虽然感觉这样做可能意义不是很大，但感觉颇有意思。</p>","title":"将并发的异步操作转化为串行执行","comments":true,"link":"","path":"/post/transforming-concurrent-asynchronous-operations-into-serial-execution"},{"id":"learn-how-antd-build-a-npm-lib","excerpt":"<p>想到去学习 antd 的打包步骤是因为自己学习制作 npm 模块时遇到了疑惑。查看<code>antd</code>（v3.9.2）的包，我们可以在目录下找到<code>dist/</code>、<code>lib/</code>、<code>es/</code>这三个目录，而且在<code>package.json</code>中指定的入口是<code>lib/</code>（<code>&quot;main&quot;: &quot;lib/index.js&quot;</code>）。然而我只会使用<code>webpack</code>打包出一个<code>dist/</code>目录，于是查看了 antd 的相关内容进行了学习。</p>","title":"简单学习 antd 的 build 步骤","comments":true,"link":"","path":"/post/learn-how-antd-build-a-npm-lib"},{"id":"version-control-of-dependencies-in-package-json","excerpt":"<p>在<code>package.json</code>中对依赖包的版本使用<code>^</code>、<code>~</code>等时需要注意的地方。<br><a href=\"https://docs.npmjs.com/files/package.json\">package.json 详细说明</a></p>","title":"package.json 中依赖包的版本控制","comments":true,"link":"","path":"/post/version-control-of-dependencies-in-package-json"},{"id":"declaration-files-of-typescript","excerpt":"<p>学习 TypeScript 稍微有一段时间了，每次写都会碰到有关声明文件的问题，目前为止暂未完全搞清楚，在此记录一些相关问题，以后碰到能够迅速解决。</p>","title":"TypeScript 中的声明文件","comments":true,"link":"","path":"/post/declaration-files-of-typescript"},{"id":"10-things-you-will-eventually-learn-about-javascript-projects","excerpt":"<blockquote>\n<p>原文：<a href=\"https://blog.usejournal.com/10-things-you-will-eventually-learn-about-javascript-projects-efd7646b958a\">10 things you will eventually learn about javascript projects</a><br>翻译仅供学习</p>\n</blockquote>","title":"[译] 前端编程中 10 条你需要了解的原则","comments":true,"link":"","path":"/post/10-things-you-will-eventually-learn-about-javascript-projects"},{"id":"a-simple-cli","excerpt":"<p>从零搭建一个简单的脚手架工具，像<code>vue-cli</code>一样，一个命令就能变出一个完整结构的初始项目。流行的脚手架工具有很多实用的功能，这里要说的是最基本的一项：通过一个命令快速创建出初始项目。</p>","title":"简单的前端脚手架","comments":true,"link":"","path":"/post/a-simple-cli"},{"id":"encapsulate-setTimeout-with-promise","excerpt":"","title":"使用promise封装setTimeout","comments":true,"link":"","path":"/post/encapsulate-setTimeout-with-promise"},{"id":"what-is-currying","excerpt":"<p>看文章的时候发现了<code>柯里化</code>一词，然而心中毫无概念，于是就查阅了相关资料有了些许认识。</p>","title":"认识柯里化(currying)","comments":true,"link":"","path":"/post/what-is-currying"},{"id":"catch-js-and-ajax-exception","excerpt":"<p>上线的项目难免会有错误，通过分析日志能够有效、准确地定位、重现并解决错误，从而提升产品体验。以下是根据资料以及目前需求所实现的一个前端日志采集的方案。</p>","title":"前端错误捕获以及ajax监听","comments":true,"link":"","path":"/post/catch-js-and-ajax-exception"}],"total":5,"current":3,"prev":2,"prev_link":"/page/2/","next":4,"next_link":"/page/4/"}}
